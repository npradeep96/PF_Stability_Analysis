"""Module that contains functions to set up discrete spatial mesh for simulations
"""

import fipy as fp
from fipy import Gmsh2D


class Geometry:
    """Class that stores geometry for simulations including mesh and boundary conditions.

    """

    def __init__(self, mesh=None):
        """Initializes instance of class:`geometry`

        Args:
            mesh (fipy.mesh): A mesh instance generated by any function that creates a mesh in the fipy package. The
                              default value is None.
        """
        self.mesh = mesh

    def circular_mesh_2d(self, radius, cell_size):
        """Function that creates a 2d circular mesh.

        This function uses the Gmsh2D builtin function from the fipy package to create a 2d circular mesh.

        Args:
            radius (float): Radius of the total domain
            cell_size (float): Side length of a discrete mesh element

        Returns:
            mesh (Gmsh2D): A 2d circular mesh that is an instance of Gmsh2D
        """

        # Construct a circular mesh
        self.mesh = Gmsh2D('''
                         cell_size = %g;
                         radius = %g;
                         Point(1) = {0, 0, 0, cell_size};
                         Point(2) = {-radius, 0, 0, cell_size};
                         Point(3) = {0, radius, 0, cell_size};
                         Point(4) = {radius, 0, 0, cell_size};
                         Point(5) = {0, -radius, 0, cell_size};
                         Circle(6) = {2, 1, 3};
                         Circle(7) = {3, 1, 4};
                         Circle(8) = {4, 1, 5};
                         Circle(9) = {5, 1, 2};
                         Line Loop(10) = {6, 7, 8, 9};
                         Plane Surface(11) = {10};
                      ''' % (cell_size, radius))

    def square_mesh_2d(self, length, dx):
        """Function that creates a 2d square mesh.

        This function uses the Grid2D function from the fipy package to create a 2d square mesh

        Args:
            length (float): Length of the square domain
            dx (float): Side length of a discrete mesh element in the square domain

        Returns:
            mesh (Grid2D): A 2d square mesh that is an instance of fipy.Grid2D
        """

        # Construct a square mesh
        nx = int(length / dx)
        self.mesh = fp.Grid2D(nx=nx, ny=nx, dx=dx, dy=dx)
        # Center the mesh at (0,0)
        self.mesh = self.mesh - float(nx) * dx * 0.5

    def cube_mesh_3d(self, length, dx):
        """Function that creates a 3d cube mesh.

        This function uses the Grid3D function from the fipy package to create a 3d cubical mesh

        Args:
            length (float): Length of the cubical domain
            dx (float): Side length of a discrete mesh element in the cubical domain

        Returns:
            mesh (Grid2D): A 2d cubical mesh that is an instance of fipy.Grid3D
        """

        # Construct a square mesh
        nx = int(length / dx)
        self.mesh = fp.Grid3D(nx=nx, ny=nx, nz=nx, dx=dx, dy=dx, dz=dx)
        # Center the mesh at (0,0)
        self.mesh = self.mesh - float(nx) * dx * 0.5
